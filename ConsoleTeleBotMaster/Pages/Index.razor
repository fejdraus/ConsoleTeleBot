@page "/"
@using Services
@using System.Text.Json
@using Microsoft.EntityFrameworkCore
@using System.IO
@using ConsoleTeleBotMaster.Data
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject IConfigService ConfigService
@inject DatabaseService DatabaseService
@inject NavigationManager NavigationManager

<EditForm Model="@_config">
    <labelrow>
        <div class="form-floating mt-3">
            <InputText @bind-Value="_config.BotConfig.Token" id="botConfigToken" class="form-control" placeholder="Telegram bot token"/>
            <label for="botConfigToken">Telegram bot token</label>
        </div>
        <div class="form-floating mt-3">
            <InputText @bind-Value="_config.BotConfig.ChatId" id="botConfigChatId" class="form-control" placeholder="Name Telegram contact or group"/>
            <label for="botConfigChatId">Name Telegram contact or group</label>
        </div>
        <div class="form-floating mt-3">
            <InputText @bind-Value="_config.AppSettings.AppPath" id="appSettingsAppPath" class="form-control" placeholder="Path to program or script"/>
            <label for="appSettingsAppPath">Path to program or script</label>
        </div>
    </labelrow>
    <div class="d-flex justify-content-between mt-3">
        <button class="btn btn-primary d-grid gap-2 d-md-flex justify-content-center btn-fixed-width me-2" @onclick="async () => await OnEditModel(null)" >Add rule</button>
        <button class="btn btn-success d-grid gap-2 d-md-flex justify-content-center btn-fixed-width me-2" @onclick="ExportAsync">Export</button>
        <button class="btn btn-success d-grid gap-2 d-md-flex justify-content-center btn-fixed-width me-2" @onclick="ImportAsync">Import</button>
        <button type="submit" class="btn btn-primary d-grid gap-2 d-md-flex justify-content-center btn-fixed-width" @onclick="async () => await SaveConfiguration()">Save configuration</button>
    </div>
    <div class="mt-3">
        <Collapse @ref="collapseExport">
            <Card>
                <CardBody class="d-flex justify-content-center">
                    <button class="btn btn-primary me-5 btn-fixed-width" @onclick='async () => await CreateFileCopy(new List<string>{"App.db"})'>Export rules</button>
                    <button class="btn btn-primary me-5 btn-fixed-width" @onclick='async () => await CreateFileCopy(new List<string>{"Settings.json"})'>Export settings</button>
                    <button class="btn btn-primary btn-fixed-width" @onclick='async () => await CreateFileCopy(new List<string>{"App.db", "Settings.json"})'>Export rules and settings</button>
                </CardBody>
            </Card>
        </Collapse>
    </div>
    <div class="mt-3">
        <Collapse @ref="collapseImport">
            <Card>
                <CardBody class="d-flex justify-content-center">
                    @if (!_clearInputFile)
                    {
                        <InputFile class="form-control me-2" OnChange="HandleFileSelected" />
                    }
                    <button class="btn btn-primary btn-fixed-width" @onclick="async () => await ImportDatabase()">Import rules</button>
                </CardBody>
            </Card>
        </Collapse>
    </div>
    <div class="mt-3">
        <Grid @ref="_grid"
              TItem="ParsingRule"
              Class="table table-hover table-bordered table-striped"
              DataProvider="EmployeesDataProvider"
              AllowPaging="true"
              PageSize="5"
              PageSizeSelectorVisible="true"
              PageSizeSelectorItems = "@(new int[] { 5,10,20,30,50 })"
              PaginationItemsTextFormat = "{0} - {1} of {2} items"
              Responsive="true"
              AllowFiltering="true">
            
            <GridColumn TItem="ParsingRule" HeaderText="Console output" Context="gridContext" HeaderTextAlignment="Alignment.Center" PropertyName="ConsoleOutput">
                @gridContext.ConsoleOutput
            </GridColumn>
            <GridColumn TItem="ParsingRule" HeaderText="Regex pattern" Context="gridContext" HeaderTextAlignment="Alignment.Center" PropertyName="RegexPattern">
                @gridContext.RegexPattern
            </GridColumn>
            <GridColumn TItem="ParsingRule" HeaderText="Result massage" Context="gridContext" HeaderTextAlignment="Alignment.Center" PropertyName="Result">
                @gridContext.Result
            </GridColumn>
            <GridColumn TItem="ParsingRule" HeaderText="Quiet message" Context="gridContext" HeaderTextAlignment="Alignment.Center" PropertyName="QuietMessage">
                <ChildContent>
                    <div class="d-grid gap-2 d-md-flex justify-content-md-center mt-2">
                        <Switch @bind-Value="@gridContext.QuietMessage" Disabled="true"/>
                    </div>
                </ChildContent>
            </GridColumn>
            <GridColumn TItem="ParsingRule" HeaderText="Action" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center" Context="gridContext" Filterable="false">
                <div class="d-grid gap-2 d-md-flex justify-content-md-center mt-2">
                    <Button Color="ButtonColor.Primary" Size="Size.Small" @onclick="async () => await OnEditModel(gridContext)"> Edit </Button>
                    <Button Color="ButtonColor.Danger" Size="Size.Small" @onclick="async () => await OnDeleteModel(gridContext)"> Delete </Button>
                </div>
            </GridColumn>
        </Grid>
    </div>
    <Modal @ref="_modal" IsVerticallyCentered="true">
        <BodyTemplate>
            <labelrow>
                <div class="form-floating mt-1">
                    <InputText @bind-Value="_parsingRule.ConsoleOutput" id="parsingRuleConsoleOutput" class="form-control" placeholder="Console output" disabled="@_parsingRule.IsDelete"/>
                    <label for="parsingRuleConsoleOutput">Console output</label>
                </div>
                <div class="form-floating mt-3">
                    <InputText @bind-Value="_parsingRule.RegexPattern" id="parsingRuleRegexPattern" class="form-control" placeholder="Regex pattern" disabled="@_parsingRule.IsDelete"/>
                    <label for="parsingRuleRegexPattern">Regex pattern</label>
                </div>
                <div class="form-floating mt-3">
                    <InputText @bind-Value="_parsingRule.Result" id="parsingRuleResult" class="form-control" placeholder="Result massage" disabled="@_parsingRule.IsDelete"/>
                    <label for="parsingRuleResult">Result massage</label>
                </div>
                <div class="mt-3 d-grid gap-2 d-md-flex justify-content-md-center">
                    <Switch @bind-Value="_parsingRule.QuietMessage" Label="Quiet message" Disabled="@_parsingRule.IsDelete"/>
                </div>
            </labelrow>
        </BodyTemplate>
        <FooterTemplate>
            <button class="row btn btn-primary col" @onclick="async () => await OnHideRuleClick()">Close</button>
            @if (_parsingRule.IsDelete)
            {
                <button class="row btn btn-outline-danger col" @onclick="async () => await OnDeleteClick()">Delete</button>
            }
            else
            {
                <button class="row btn btn-success col" @onclick="async () => await OnSaveClick()">Save</button>
            }
        </FooterTemplate>
    </Modal>
    <Toasts class="p-3" Messages="_messages" Placement="ToastsPlacement.TopRight" AutoHide="true" Delay="4000"/>
</EditForm>
@code
{
    readonly AppConfig _config = new();
    ParsingRule _parsingRule = new();
    private List<ParsingRule>? _employees;
    private Modal _modal = default!;
    Grid<ParsingRule> _grid;
    List<ToastMessage> _messages = new();
    Collapse collapseExport = default!;
    Collapse collapseImport = default!;
    private IBrowserFile? selectedFile;
    private bool _clearInputFile;
    
    private void ShowMessage(ToastType toastType, string message) => _messages.Add(CreateToastMessage(toastType, message));

    private ToastMessage CreateToastMessage(ToastType toastType, string message)
    {
        var toastMessage = new ToastMessage
        {
            Type = toastType,
            Message = message
        };
        return toastMessage;
    }
    
    private async Task<GridDataProviderResult<ParsingRule>> EmployeesDataProvider(GridDataProviderRequest<ParsingRule> request)
    {
        _employees ??= await GetEmployees();

        return await Task.FromResult(request.ApplyTo(_employees));
    }

    private async Task<List<ParsingRule>> GetEmployees()
    {
        await using var context = await DbContextFactory.CreateDbContextAsync();
        return await context.ParsingRules.AsNoTracking().ToListAsync();
    }

    private async Task OnHideRuleClick()
    {
        await _modal.HideAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        var appConfig = await ConfigService.GetAppConfig();
        _config.BotConfig.Token = appConfig.BotConfig.Token;
        _config.BotConfig.ChatId = appConfig.BotConfig.ChatId;
        _config.AppSettings.AppPath = appConfig.AppSettings.AppPath;
    }

    private async Task SaveConfiguration()
    {
        var jsonWriteOptions = new JsonSerializerOptions
        {
            PropertyNamingPolicy = new PreservePropertyNames(),
            WriteIndented = true
        };
        var newJson = JsonSerializer.Serialize(_config, jsonWriteOptions);
        var appSettingsPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "appsettings.json");
        await File.WriteAllTextAsync(appSettingsPath, newJson);
        ShowMessage(ToastType.Success, "Settings saved");
    }
    
    private async Task Start()
    {
        await using var context = await DbContextFactory.CreateDbContextAsync();
        var startBot = new StartBot(context, await ConfigService.GetAppConfig());
        await startBot.Execute();
    }

    private async Task OnEditModel(ParsingRule? rule)
    {
        _parsingRule = new ParsingRule();
        if (rule is null)
        {
            _parsingRule.Id = Guid.NewGuid();
            _parsingRule.ConsoleOutput = "";
            _parsingRule.RegexPattern = "";
            _parsingRule.Result = "";
            _parsingRule.QuietMessage = false;
            _parsingRule.IsDelete = false;
        }
        else
        {
            _parsingRule.Id = rule.Id;
            _parsingRule.ConsoleOutput = rule.ConsoleOutput;
            _parsingRule.RegexPattern = rule.RegexPattern;
            _parsingRule.Result = rule.Result;
            _parsingRule.QuietMessage = rule.QuietMessage;
            _parsingRule.IsDelete = false;
        }
        await _modal.ShowAsync();
    }

    private async Task OnDeleteModel(ParsingRule rule)
    {
        _parsingRule.Id = rule.Id;
        _parsingRule.ConsoleOutput = rule.ConsoleOutput;
        _parsingRule.RegexPattern = rule.RegexPattern;
        _parsingRule.Result = rule.Result;
        _parsingRule.QuietMessage = rule.QuietMessage;
        _parsingRule.IsDelete = true;
        await _modal.ShowAsync();
    }
    
    private async Task OnDeleteClick()
    {
        {
            var ruleInList = _employees?.Where(x => x.Id == _parsingRule.Id).FirstOrDefault();
            if (ruleInList != null)
            {
                await using var context = await DbContextFactory.CreateDbContextAsync();
                context.ParsingRules.Remove(ruleInList);
                var deletedRuleCount = await context.SaveChangesAsync();
                if (deletedRuleCount > 0)
                {
                    _employees?.Remove(ruleInList);
                }
            }
        }
        await _grid.RefreshDataAsync();
        await _modal.HideAsync();
        ShowMessage(ToastType.Danger, "Rule deketed");
    }

    private async Task OnSaveClick()
    {
        await using var context = await DbContextFactory.CreateDbContextAsync();
        var ruleInList = _employees?.FirstOrDefault(x => x.Id == _parsingRule.Id);
        if (ruleInList is null)
        {
            context.ParsingRules.Add(_parsingRule);
            _employees?.Add(_parsingRule);
        }
        else
        {
            ruleInList.QuietMessage = _parsingRule.QuietMessage;
            ruleInList.ConsoleOutput = _parsingRule.ConsoleOutput;
            ruleInList.RegexPattern = _parsingRule.RegexPattern;
            ruleInList.Result = _parsingRule.Result;
            context.ParsingRules.Update(ruleInList);
            
        }
        await context.SaveChangesAsync();
        await _grid.RefreshDataAsync();
        await _modal.HideAsync();
        ShowMessage(ToastType.Primary, "Rule modified");
    }
    
    private async Task CreateFileCopy(List<string> fileNames)
    {
        var filePath = await DatabaseService.CreateFileCopyAndArchive(fileNames);
        var fileUrl = $"{NavigationManager.BaseUri}{Path.GetFileName(filePath)}";
        NavigationManager.NavigateTo(fileUrl, forceLoad: true);
    }
    
    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }
    
    private async Task ImportDatabase()
    {
        if (selectedFile != null)
        {
            var error = "";
            try
            {
                error = await DatabaseService.ImportDatabaseAsync(selectedFile);
            }
            catch (Exception ex)
            {
                error = ex.Message;
            }
            _employees = null;
            await _grid.RefreshDataAsync();
            selectedFile = null;
            StateHasChanged();
            _clearInputFile = true;
            StateHasChanged();
            _clearInputFile = false;
            StateHasChanged();
            ShowMessage(ToastType.Danger, "Import error: " + error);
        }
    }
    
    private async Task ExportAsync()
    {
        await collapseImport.HideAsync();
        await collapseExport.ToggleAsync();
    }

    private async Task ImportAsync()
    {
        await collapseExport.HideAsync();
        await collapseImport.ToggleAsync();
    }
}